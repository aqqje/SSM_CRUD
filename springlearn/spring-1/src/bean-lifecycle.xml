<?xml version="1.0" encoding="UTF-8"?><beans xmlns="http://www.springframework.org/schema/beans"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xmlns:p="http://www.springframework.org/schema/p"       xsi:schemaLocation="http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd">    <!--        IoC 容器中 Bean 的周期：            作用：                Spring IOC 容器可以管理 Bean 的生命周期, Spring 允许在 Bean 生命周期的特定点执行定制的任务.            初始 && 销毁                在 Bean 的声明里设置 init-method 和 destroy-method 属性, 为 Bean 指定初始化和销毁方法.         Bean 的周期过程：             1.通过构造器或工厂方法创建 Bean 实例             2.为 Bean 的属性设置值和对其他 Bean 的引用             3.调用 Bean 的初始化方法             4.Bean 可以使用了             5.当容器关闭时, 调用 Bean 的销毁方法       Bean 后置处理器：            作用：                1.在调用初始化方法前后对 Bean 进行额外的处理.                2.Bean 后置处理器对 IOC 容器里的所有 Bean 实例逐一处理, 而非单一实例. 其典型应用是: 检查 Bean 属性的正确性或根据特定的标准更改 Bean 的属性.            实现:                1.自定义 Bean 后置处理器并实现 BeanPostProcessor 接口                2.初始化方法被调用前后，重写 postProcessAfterInitialixation(...) && postProcessBeforeInitialixation(...)方法                3.在 spring IoC 容器中配置Bean 后置处理器           添加 Bean 后置处理器中 Bean 的周期过程：                1.通过构造器或工厂方法创建 Bean 实例                2.为 Bean 的属性设置值和对其他 Bean 的引用                3.*将 Bean 实例传递给 Bean 后置处理器的 postProcessBeforeInitialization 方法*                4.调用 Bean 的初始化方法                5.*将 Bean 实例传递给 Bean 后置处理器的 postProcessAfterInitialization方法*                6.Bean 可以使用了                7.当容器关闭时, 调用 Bean 的销毁方法-->    <bean id="car" class="aqqje.com.lifecycle.Car"          p:name="BMWX6" p:price="10000000" init-method="init" destroy-method="destroy"/>    <!--        bean : bean 实例本身        beanName: IoC容器配置 的bean 的名字        返回值： 是实际上返回给用户的那个 Bean, 注意：可以在以上两方法中修改返回的 bean, 甚至返回一个新的 bean        配置 bean 的后置处理器： 不需要配置 id , IoC 容器自动识别一个 BeanPostProcessor     -->    <bean class="aqqje.com.lifecycle.MyPostProcessor" /></beans>