<?xml version="1.0" encoding="UTF-8"?><beans xmlns="http://www.springframework.org/schema/beans"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xmlns:util="http://www.springframework.org/schema/util"       xmlns:p="http://www.springframework.org/schema/p"       xsi:schemaLocation="http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/util       http://www.springframework.org/schema/util/spring-util.xsd ">    <!--        配置 bean        使用属性注入        class: bean 的类名, 通过反射方式在 IoC 容器创建 bean, 要求：bean 中必须要无参的构造器        id: 标识容器的 bean , 要求：唯一        -->    <bean id="helloWord" class="aqqje.com.beans.HelloWord">        <property name="name" value="liuli"></property>    </bean>    <!--        使用构造器注入 （使用索引[index]定位） 可以与type  混用     -->    <bean id="persion1" class="aqqje.com.beans.Persion">        <constructor-arg value="aqqje" index="0"></constructor-arg>        <constructor-arg value="男" index="1"></constructor-arg>        <constructor-arg value="1" index="2"></constructor-arg>    </bean>    <!--        使用构造器注入 （使用索引[type]定位）        字面值：可用字符串表示的值            1.可以使用 <value> 元素标签 或 value 属性进行注入            2.基本数据类型及其封装类, Stirng 等类型都可以采取字面值注入的方式            3.若字面值包含特殊字符，可以使用<![CDATA[]]>把字面值包裹     -->    <bean id="persion2" class="aqqje.com.beans.Persion">        <constructor-arg value="aqqje" type="java.lang.String"></constructor-arg>        <constructor-arg type="java.lang.String">            <value><![CDATA[<男>]]></value>        </constructor-arg>        <constructor-arg type="double">            <value>500.0</value>        </constructor-arg>    </bean>    <!--        1.通过 <ref> 元素或 ref 属性为 bean 的属性或构造参数指定对 Bean 的引用        2.也可以创建内部 Bean     -->    <bean id="god" class="aqqje.com.beans.God">        <property name="name" value="liuli"></property>        <property name="leg" value="4"></property>        <!-- 可以使用专用的 <null/> 元素标签为 Bean 的字符串或其它对象类型的属性注入null 值 -->        <property name="persion"><null/></property>        <!--<property name="persion">            &lt;!&ndash; 内部Bean, 注意：不能被外部 Bean 引用, 只能在内部使用  &ndash;&gt;            <bean class="aqqje.com.beans.Persion">                <constructor-arg value="aqqje" type="java.lang.String"></constructor-arg>                <constructor-arg type="java.lang.String">                    <value><![CDATA[<男>]]></value>                </constructor-arg>                <constructor-arg type="double">                    <value>20000.0</value>                </constructor-arg>            </bean>        </property>-->        <!--<property name="persion" ref="persion1"></property>-->        <!--<property name="persion">            <ref bean="persion2" />        </property>-->    </bean>    <bean id="god1" class="aqqje.com.beans.God">        <property name="name" value="soft" />        <property name="leg" value="2" />        <property name="persion" ref="persion1" />        <!-- spring 支持级联属性: 级联属性赋值 注意：属性需要先初始化，才能级联属性赋值, 否则将抛出异常 -->        <property name="persion.name" value="love"></property>    </bean>    <!-- 测试集合属性 -->    <bean id="god3" class="aqqje.com.beans.contollers.God">        <property name="name" value="china" />        <property name="leg" value="2" />        <property name="persion">            <!--            使用 list 节点为 List 类型属性赋值            Set 类型类似 List             -->            <list>                <ref bean="persion1"/>                <ref bean="persion2"/>            </list>        </property>    </bean>    <bean id="newGod" class="aqqje.com.beans.contollers.NewGod">        <property name="name" value="china" />        <property name="leg" value="2" />        <property name="persion">            <!-- 使用 map 节点及 map中的 entry 节点配置 Map 属性的成员变量 -->            <map>                <entry key="aa" value-ref="persion1" />                <entry key="bb" value-ref="persion2" />            </map>        </property>    </bean>    <!-- Properties 属性 -->    <bean id="dataSource" class="aqqje.com.beans.contollers.DataSource">        <property name="properties">            <!-- 使用 props 和 prop 配置 properties 文件 -->            <props>                <prop key="driverClass">com.jdbc.mysql.Driver</prop>                <prop key="jdbcUrl">jdbc.mysql:///test</prop>                <prop key="user">root</prop>                <prop key="password">root</prop>            </props>        </property>    </bean>    <!--配置单例集合的 Bean, 命名空间 以便多个 Bean 引用 : 注意：需要导入 util jar包-->    <util:list id="persions">        <ref bean="persion1" />        <ref bean="persion2" />    </util:list>    <bean id="god4" class="aqqje.com.beans.contollers.God">        <property name="name" value="Tom" />        <property name="leg" value="4" />        <property name="persion" ref="persions"/>    </bean>    <!--通过 p 命名空间对 Bean 的属性进行赋值 注意：需要导入 p jar包 ;特点：比较传统的方式更简洁-->    <bean id="god5" class="aqqje.com.beans.contollers.God"  p:name="Aellen" p:leg="5" p:persion-ref="persions" ></bean></beans>