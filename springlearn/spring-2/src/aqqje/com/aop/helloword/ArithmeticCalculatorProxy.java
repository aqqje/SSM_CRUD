/** * Copyright (c), 2018-2018, XXX有限公司 * FileName: ArithmeticCalculatorProxy * Author:   Administrator * Date:     2018/5/721:44 * Description: * History: * <author>    <time>    <version>    <desc> * 作者姓名     修改时间      版本号       描述 */package aqqje.com.aop.helloword;import java.lang.reflect.InvocationHandler;import java.lang.reflect.Method;import java.lang.reflect.Proxy;import java.util.Arrays;public class ArithmeticCalculatorProxy {    // 代理对象    ArithmeticCalculator target;    public ArithmeticCalculatorProxy(ArithmeticCalculator target){            this.target = target;    }    public ArithmeticCalculator getLoggingProxy(){        // 代理        ArithmeticCalculator proxy;        // 指定代理对象的加载器        ClassLoader loader = target.getClass().getClassLoader();        // 指定代理对象的类型        Class[] interfaces = new Class[]{ArithmeticCalculator.class};        // 当调用代理对象的方法时，调用该方法        InvocationHandler h = new InvocationHandler() {            /**             *             * @param proxy : 正在返回的那代理对象，一般情况下， 不是 invoke 方法中使用该对象             * @param method： 正在被调用的方法             * @param args： 调用方法的参数             * @return             * @throws Throwable             */            @Override            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {                String methodName = method.getName();                // 日志                System.out.println("The method " + methodName + " with " + Arrays.asList(args));                // 执行的方法                Object result = method.invoke(target, args);                // 日志                System.out.println("The method " + methodName + " with " + result);                return result;            }        };        proxy = (ArithmeticCalculator) Proxy.newProxyInstance(loader, interfaces, h);        return proxy;    }}