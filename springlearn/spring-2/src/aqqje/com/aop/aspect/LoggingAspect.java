/** * Copyright (c), 2018-2018, XXX有限公司 * FileName: LoggingAspect * Author:   Administrator * Date:     2018/5/810:43 * Description: * History: * <author>    <time>    <version>    <desc> * 作者姓名     修改时间      版本号       描述 */package aqqje.com.aop.aspect;import org.aspectj.lang.JoinPoint;import org.aspectj.lang.annotation.After;import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.Before;import org.springframework.stereotype.Component;import java.util.Arrays;import java.util.List;// 把这个类声明为一个切面：1. 把该放入 IoC 容器中 2. 使用 @Aspect 注解声明该类是一个切面@Aspect@Componentpublic class LoggingAspect {    // 声明一个前置通知： 在目标方法之前执行    @Before("execution(* aqqje.com.aop.aspect.ArithmeticCalculator.*(int, int))")    public void beforMethod(JoinPoint joinPoint) {        String methodName = joinPoint.getClass().getName();        System.out.println("The method " + methodName + " with " + Arrays.asList(joinPoint.getArgs()));    }    // 后置通知与前置通知使用相同，注意：后置通知无论方法是否有异常都会执行    @After("execution(* aqqje.com.aop.aspect.ArithmeticCalculator.*(int, int))")    public void afterMethod(JoinPoint joinPoint) {        String methodName = joinPoint.getClass().getName();        System.out.println("The method " + methodName + " end " + Arrays.asList(joinPoint.getArgs()));    }}