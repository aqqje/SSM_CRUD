/** * Copyright (c), 2018-2018, XXX有限公司 * FileName: CashierImpl * Author:   Administrator * Date:     2018/5/1214:45 * Description: * History: * <author>    <time>    <version>    <desc> * 作者姓名     修改时间      版本号       描述 */package aqqje.com.jdbc.txxml.services;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Propagation;import org.springframework.transaction.annotation.Transactional;import java.util.List;public class CashierImpl implements Cashier {    private BookStockService bookStockService;    public void setBookStockService(BookStockService bookStockService) {        this.bookStockService = bookStockService;    }    /**     * 1.使用 propagation 指定事务的传播行为，即当前事务方法被别处一个事务方法调用时     *  如何使用事务，默认取值为 REQUIRED， 即使用调用方法的事务     *  REQUIRES_NEW：事务自己的事务，调用的事务方法的事务被挂起。     *  2. 使用 isolation 指定事务的隔离级别， 最常用的取值为事务READ_COMMITTED     *  3.默认情况下 spring 的声明式事务所有的运行时异常进行回滚，也可以通过对应的属性进行设置，通常情况下去默认值即可。     *  4.使用 readOnly 指定指定事务的是否为只读， 表示这个事务只读取数据但不更新数据 ，     *  这样可以帮助数据库引擎优化事务， 若真的事一个只读取数据库值的方法， 应设置 readOnly = true     *  5.使用 timiout 指定强制回滚之前事务可以占用的赶时间     */    @Transactional(propagation=Propagation.REQUIRED)    @Override    public void checkOut(String username, List<Integer> isbns) {        for(Integer isbn: isbns){            bookStockService.purchase(username, isbn);        }    }}