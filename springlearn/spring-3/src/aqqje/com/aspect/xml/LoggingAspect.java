/** * Copyright (c), 2018-2018, XXX有限公司 * FileName: LoggingAspect * Author:   Administrator * Date:     2018/5/916:23 * Description: * History: * <author>    <time>    <version>    <desc> * 作者姓名     修改时间      版本号       描述 */package aqqje.com.aspect.xml;import org.aspectj.lang.JoinPoint;import org.aspectj.lang.ProceedingJoinPoint;import org.aspectj.lang.annotation.*;import org.springframework.stereotype.Component;import java.util.Arrays;import java.util.List;public class LoggingAspect {    public void declareJointPointExpression(){}    public void berforeMethod(JoinPoint joinPoint){        String methodName = joinPoint.getClass().getName();        List<Object> args = Arrays.asList(joinPoint.getArgs());        System.out.println("The method " + methodName + " with " + args);    }    public void afterMethod(JoinPoint joinPoint){        String methodName = joinPoint.getClass().getName();        List<Object> args = Arrays.asList(joinPoint.getArgs());        System.out.println("The method " + methodName + " end " + args);    }    public void afterReturnMethod(JoinPoint joinPoint, Object result){        String methodName = joinPoint.getClass().getName();        List<Object> args = Arrays.asList(joinPoint.getArgs());        System.out.println("The method " + methodName + " end " + result);    }    public void afterThorwMethod(JoinPoint joinPoint, Exception e){        String methodName = joinPoint.getClass().getName();        List<Object> args = Arrays.asList(joinPoint.getArgs());        System.out.println("The method " + methodName + " ocrrous thorw " + e);    }   /* @Around(value="declareJointPointExpression()")    public Object arounMethod(ProceedingJoinPoint joinPoint){        String methodName = joinPoint.getClass().getName();        List<Object> args = Arrays.asList(joinPoint.getArgs());        Object result = null;        try {            // 前置通知            System.out.println("The method " + methodName + " with " + args);            // 执行方法            result = joinPoint.proceed();            // 返回通知            System.out.println("The method " + methodName + " end " + result);        } catch (Throwable throwable) {            throwable.printStackTrace();            // 异常通知            System.out.println("The method " + methodName + " ocrrous thorw " + throwable);        }        // 后置通知        System.out.println("The method " + methodName + " end " + result);        return result;    }*/}